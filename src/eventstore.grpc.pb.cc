// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: eventstore.proto

#include "eventstore.pb.h"
#include "eventstore.grpc.pb.h"

#include <grpc++/async_unary_call.h>
#include <grpc++/channel_interface.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/stream.h>
namespace event {

static const char* EventStore_method_names[] = {
  "/event.EventStore/get_events",
};

std::unique_ptr< EventStore::Stub> EventStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel) {
  std::unique_ptr< EventStore::Stub> stub(new EventStore::Stub(channel));
  return stub;
}

EventStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : ::grpc::InternalStub(channel), rpcmethod_get_events_(EventStore_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel->RegisterMethod(EventStore_method_names[0]))
  {}

::grpc::ClientReader< ::common::Event>* EventStore::Stub::get_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request) {
  return new ::grpc::ClientReader< ::common::Event>(channel(), rpcmethod_get_events_, context, request);
}

::grpc::ClientAsyncReader< ::common::Event>* EventStore::Stub::Asyncget_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::common::Event>(channel(), cq, rpcmethod_get_events_, context, request, tag);
}

EventStore::AsyncService::AsyncService() : ::grpc::AsynchronousService(EventStore_method_names, 1) {}

EventStore::Service::~Service() {
  delete service_;
}

::grpc::Status EventStore::Service::get_events(::grpc::ServerContext* context, const ::common::Uuid* request, ::grpc::ServerWriter< ::common::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void EventStore::AsyncService::Requestget_events(::grpc::ServerContext* context, ::common::Uuid* request, ::grpc::ServerAsyncWriter< ::common::Event>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* EventStore::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      EventStore_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< EventStore::Service, ::common::Uuid, ::common::Event>(
          std::mem_fn(&EventStore::Service::get_events), this)));
  return service_;
}


}  // namespace event

