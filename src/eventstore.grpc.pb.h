// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: eventstore.proto
#ifndef GRPC_eventstore_2eproto__INCLUDED
#define GRPC_eventstore_2eproto__INCLUDED

#include "eventstore.pb.h"

#include <grpc++/impl/internal_stub.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/async_unary_call.h>
#include <grpc++/status.h>
#include <grpc++/stream.h>

namespace grpc {
class CompletionQueue;
class ChannelInterface;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace event {

class EventStore GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::common::Event>> get_events(::grpc::ClientContext* context, const ::common::Uuid& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::common::Event>>(get_eventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::common::Event>> Asyncget_events(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::common::Event>>(Asyncget_eventsRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::common::Event>* get_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::common::Event>* Asyncget_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface, public ::grpc::InternalStub {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::common::Event>> get_events(::grpc::ClientContext* context, const ::common::Uuid& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::common::Event>>(get_eventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::common::Event>> Asyncget_events(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::common::Event>>(Asyncget_eventsRaw(context, request, cq, tag));
    }

   private:
    ::grpc::ClientReader< ::common::Event>* get_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::common::Event>* Asyncget_eventsRaw(::grpc::ClientContext* context, const ::common::Uuid& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_get_events_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status get_events(::grpc::ServerContext* context, const ::common::Uuid* request, ::grpc::ServerWriter< ::common::Event>* writer);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void Requestget_events(::grpc::ServerContext* context, ::common::Uuid* request, ::grpc::ServerAsyncWriter< ::common::Event>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace event


#endif  // GRPC_eventstore_2eproto__INCLUDED
