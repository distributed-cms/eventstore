// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common {

namespace {

const ::google::protobuf::Descriptor* ExecutionReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uuid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uuid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Level_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  ExecutionReport_descriptor_ = file->message_type(0);
  static const int ExecutionReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, message_),
  };
  ExecutionReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecutionReport_descriptor_,
      ExecutionReport::default_instance_,
      ExecutionReport_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecutionReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, _is_default_instance_));
  Uuid_descriptor_ = file->message_type(1);
  static const int Uuid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, least_significant_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, most_significant_bits_),
  };
  Uuid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uuid_descriptor_,
      Uuid::default_instance_,
      Uuid_offsets_,
      -1,
      -1,
      -1,
      sizeof(Uuid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uuid, _is_default_instance_));
  Event_descriptor_ = file->message_type(2);
  static const int Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, aggregate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, serialized_data_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  Format_descriptor_ = file->enum_type(0);
  Level_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecutionReport_descriptor_, &ExecutionReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uuid_descriptor_, &Uuid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete ExecutionReport::default_instance_;
  delete ExecutionReport_reflection_;
  delete Uuid::default_instance_;
  delete Uuid_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
}

void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\006common\"@\n\017ExecutionReport\022"
    "\034\n\005level\030\001 \001(\0162\r.common.Level\022\017\n\007message"
    "\030\002 \001(\t\"E\n\004Uuid\022\036\n\026least_significant_bits"
    "\030\001 \001(\022\022\035\n\025most_significant_bits\030\002 \001(\022\"D\n"
    "\005Event\022\"\n\014aggregate_id\030\001 \001(\0132\014.common.Uu"
    "id\022\027\n\017serialized_data\030\002 \001(\t*\?\n\006Format\022\010\n"
    "\004HTML\020\000\022\006\n\002MD\020\001\022\007\n\003RST\020\002\022\007\n\003SRC\020\003\022\007\n\003IMG"
    "\020\004\022\010\n\004GIST\020\005*1\n\005Level\022\t\n\005DEBUG\020\000\022\010\n\004INFO"
    "\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR\020\003B\003\370\001\001b\006proto3", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  ExecutionReport::default_instance_ = new ExecutionReport();
  Uuid::default_instance_ = new Uuid();
  Event::default_instance_ = new Event();
  ExecutionReport::default_instance_->InitAsDefaultInstance();
  Uuid::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;
const ::google::protobuf::EnumDescriptor* Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Format_descriptor_;
}
bool Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Level_descriptor_;
}
bool Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ExecutionReport::kLevelFieldNumber;
const int ExecutionReport::kMessageFieldNumber;
#endif  // !_MSC_VER

ExecutionReport::ExecutionReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.ExecutionReport)
}

ExecutionReport::ExecutionReport(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.ExecutionReport)
}

void ExecutionReport::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExecutionReport::ExecutionReport(const ExecutionReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.ExecutionReport)
}

void ExecutionReport::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ExecutionReport::~ExecutionReport() {
  // @@protoc_insertion_point(destructor:common.ExecutionReport)
  SharedDtor();
}

void ExecutionReport::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  message_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void ExecutionReport::ArenaDtor(void* object) {
  ExecutionReport* _this = reinterpret_cast< ExecutionReport* >(object);
  (void)_this;
}
void ExecutionReport::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ExecutionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionReport_descriptor_;
}

const ExecutionReport& ExecutionReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

ExecutionReport* ExecutionReport::default_instance_ = NULL;

ExecutionReport* ExecutionReport::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ExecutionReport>(arena);
}

void ExecutionReport::Clear() {
  level_ = 0;
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ExecutionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.ExecutionReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Level level = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::common::Level >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common.ExecutionReport.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.ExecutionReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.ExecutionReport)
  return false;
#undef DO_
}

void ExecutionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.ExecutionReport)
  // optional .common.Level level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.ExecutionReport.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:common.ExecutionReport)
}

::google::protobuf::uint8* ExecutionReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.ExecutionReport)
  // optional .common.Level level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.ExecutionReport.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:common.ExecutionReport)
  return target;
}

int ExecutionReport::ByteSize() const {
  int total_size = 0;

  // optional .common.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionReport::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExecutionReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionReport>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionReport::MergeFrom(const ExecutionReport& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.message().size() > 0) {
    set_message(from.message());
  }
}

void ExecutionReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionReport::CopyFrom(const ExecutionReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionReport::IsInitialized() const {

  return true;
}

void ExecutionReport::Swap(ExecutionReport* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ExecutionReport temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void ExecutionReport::UnsafeArenaSwap(ExecutionReport* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ExecutionReport::InternalSwap(ExecutionReport* other) {
  std::swap(level_, other->level_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionReport_descriptor_;
  metadata.reflection = ExecutionReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionReport

// optional .common.Level level = 1;
void ExecutionReport::clear_level() {
  level_ = 0;
}
 ::common::Level ExecutionReport::level() const {
  // @@protoc_insertion_point(field_get:common.ExecutionReport.level)
  return static_cast< ::common::Level >(level_);
}
 void ExecutionReport::set_level(::common::Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:common.ExecutionReport.level)
}

// optional string message = 2;
void ExecutionReport::clear_message() {
  message_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& ExecutionReport::message() const {
  // @@protoc_insertion_point(field_get:common.ExecutionReport.message)
  return message_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExecutionReport::set_message(const ::std::string& value) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:common.ExecutionReport.message)
}
 void ExecutionReport::set_message(const char* value) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:common.ExecutionReport.message)
}
 void ExecutionReport::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:common.ExecutionReport.message)
}
 ::std::string* ExecutionReport::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:common.ExecutionReport.message)
  return message_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ExecutionReport::release_message() {
  
  return message_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* ExecutionReport::unsafe_arena_release_message() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void ExecutionReport::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:common.ExecutionReport.message)
}
 void ExecutionReport::unsafe_arena_set_allocated_message(
    ::std::string* message) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message != NULL) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:common.ExecutionReport.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Uuid::kLeastSignificantBitsFieldNumber;
const int Uuid::kMostSignificantBitsFieldNumber;
#endif  // !_MSC_VER

Uuid::Uuid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Uuid)
}

Uuid::Uuid(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Uuid)
}

void Uuid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Uuid::Uuid(const Uuid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.Uuid)
}

void Uuid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  least_significant_bits_ = GOOGLE_LONGLONG(0);
  most_significant_bits_ = GOOGLE_LONGLONG(0);
}

Uuid::~Uuid() {
  // @@protoc_insertion_point(destructor:common.Uuid)
  SharedDtor();
}

void Uuid::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void Uuid::ArenaDtor(void* object) {
  Uuid* _this = reinterpret_cast< Uuid* >(object);
  (void)_this;
}
void Uuid::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Uuid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uuid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uuid_descriptor_;
}

const Uuid& Uuid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Uuid* Uuid::default_instance_ = NULL;

Uuid* Uuid::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Uuid>(arena);
}

void Uuid::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Uuid*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(least_significant_bits_, most_significant_bits_);

#undef ZR_HELPER_
#undef ZR_

}

bool Uuid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Uuid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 least_significant_bits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &least_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_most_significant_bits;
        break;
      }

      // optional sint64 most_significant_bits = 2;
      case 2: {
        if (tag == 16) {
         parse_most_significant_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &most_significant_bits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Uuid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Uuid)
  return false;
#undef DO_
}

void Uuid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->least_significant_bits(), output);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->most_significant_bits(), output);
  }

  // @@protoc_insertion_point(serialize_end:common.Uuid)
}

::google::protobuf::uint8* Uuid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Uuid)
  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->least_significant_bits(), target);
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->most_significant_bits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:common.Uuid)
  return target;
}

int Uuid::ByteSize() const {
  int total_size = 0;

  // optional sint64 least_significant_bits = 1;
  if (this->least_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->least_significant_bits());
  }

  // optional sint64 most_significant_bits = 2;
  if (this->most_significant_bits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->most_significant_bits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uuid::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Uuid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uuid>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Uuid::MergeFrom(const Uuid& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.least_significant_bits() != 0) {
    set_least_significant_bits(from.least_significant_bits());
  }
  if (from.most_significant_bits() != 0) {
    set_most_significant_bits(from.most_significant_bits());
  }
}

void Uuid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uuid::CopyFrom(const Uuid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uuid::IsInitialized() const {

  return true;
}

void Uuid::Swap(Uuid* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Uuid temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Uuid::UnsafeArenaSwap(Uuid* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Uuid::InternalSwap(Uuid* other) {
  std::swap(least_significant_bits_, other->least_significant_bits_);
  std::swap(most_significant_bits_, other->most_significant_bits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uuid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uuid_descriptor_;
  metadata.reflection = Uuid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uuid

// optional sint64 least_significant_bits = 1;
void Uuid::clear_least_significant_bits() {
  least_significant_bits_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Uuid::least_significant_bits() const {
  // @@protoc_insertion_point(field_get:common.Uuid.least_significant_bits)
  return least_significant_bits_;
}
 void Uuid::set_least_significant_bits(::google::protobuf::int64 value) {
  
  least_significant_bits_ = value;
  // @@protoc_insertion_point(field_set:common.Uuid.least_significant_bits)
}

// optional sint64 most_significant_bits = 2;
void Uuid::clear_most_significant_bits() {
  most_significant_bits_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Uuid::most_significant_bits() const {
  // @@protoc_insertion_point(field_get:common.Uuid.most_significant_bits)
  return most_significant_bits_;
}
 void Uuid::set_most_significant_bits(::google::protobuf::int64 value) {
  
  most_significant_bits_ = value;
  // @@protoc_insertion_point(field_set:common.Uuid.most_significant_bits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Event::_slow_mutable_aggregate_id() {
  aggregate_id_ = ::google::protobuf::Arena::CreateMessage< ::common::Uuid >(
        GetArenaNoVirtual());
}
::common::Uuid* Event::_slow_release_aggregate_id() {
  if (aggregate_id_ == NULL) {
    return NULL;
  } else {
    ::common::Uuid* temp = new ::common::Uuid;
    temp->MergeFrom(*aggregate_id_);
    aggregate_id_ = NULL;
    return temp;
  }
}
::common::Uuid* Event::unsafe_arena_release_aggregate_id() {
  
  ::common::Uuid* temp = aggregate_id_;
  aggregate_id_ = NULL;
  return temp;
}
void Event::_slow_set_allocated_aggregate_id(
    ::google::protobuf::Arena* message_arena, ::common::Uuid** aggregate_id) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*aggregate_id) == NULL) {
      message_arena->Own(*aggregate_id);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*aggregate_id)) {
      ::common::Uuid* new_aggregate_id = 
            ::google::protobuf::Arena::CreateMessage< ::common::Uuid >(
            message_arena);
      new_aggregate_id->CopyFrom(**aggregate_id);
      *aggregate_id = new_aggregate_id;
    }
}
void Event::unsafe_arena_set_allocated_aggregate_id(
    ::common::Uuid* aggregate_id) {
  if (GetArenaNoVirtual() == NULL) {
    delete aggregate_id_;
  }
  aggregate_id_ = aggregate_id;
  if (aggregate_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:common.Event.aggregate_id)
}
#ifndef _MSC_VER
const int Event::kAggregateIdFieldNumber;
const int Event::kSerializedDataFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.Event)
}

Event::Event(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  aggregate_id_ = const_cast< ::common::Uuid*>(&::common::Uuid::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:common.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  aggregate_id_ = NULL;
  serialized_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:common.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  serialized_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete aggregate_id_;
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Event>(arena);
}

void Event::Clear() {
  if (GetArenaNoVirtual() == NULL && aggregate_id_ != NULL) delete aggregate_id_;
  aggregate_id_ = NULL;
  serialized_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:common.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.Uuid aggregate_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aggregate_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serialized_data;
        break;
      }

      // optional string serialized_data = 2;
      case 2: {
        if (tag == 18) {
         parse_serialized_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialized_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serialized_data().data(), this->serialized_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common.Event.serialized_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:common.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:common.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:common.Event)
  // optional .common.Uuid aggregate_id = 1;
  if (this->has_aggregate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->aggregate_id_, output);
  }

  // optional string serialized_data = 2;
  if (this->serialized_data().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_data().data(), this->serialized_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.Event.serialized_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serialized_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:common.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.Event)
  // optional .common.Uuid aggregate_id = 1;
  if (this->has_aggregate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->aggregate_id_, target);
  }

  // optional string serialized_data = 2;
  if (this->serialized_data().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serialized_data().data(), this->serialized_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common.Event.serialized_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serialized_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:common.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  // optional .common.Uuid aggregate_id = 1;
  if (this->has_aggregate_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aggregate_id_);
  }

  // optional string serialized_data = 2;
  if (this->serialized_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serialized_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_aggregate_id()) {
    mutable_aggregate_id()->::common::Uuid::MergeFrom(from.aggregate_id());
  }
  if (from.serialized_data().size() > 0) {
    set_serialized_data(from.serialized_data());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Event temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void Event::UnsafeArenaSwap(Event* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(aggregate_id_, other->aggregate_id_);
  serialized_data_.Swap(&other->serialized_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .common.Uuid aggregate_id = 1;
bool Event::has_aggregate_id() const {
  return !_is_default_instance_ && aggregate_id_ != NULL;
}
void Event::clear_aggregate_id() {
  if (GetArenaNoVirtual() == NULL && aggregate_id_ != NULL) delete aggregate_id_;
  aggregate_id_ = NULL;
}
 const ::common::Uuid& Event::aggregate_id() const {
  // @@protoc_insertion_point(field_get:common.Event.aggregate_id)
  return aggregate_id_ != NULL ? *aggregate_id_ : *default_instance_->aggregate_id_;
}
 ::common::Uuid* Event::mutable_aggregate_id() {
  
  if (aggregate_id_ == NULL) {
    _slow_mutable_aggregate_id();  }
  // @@protoc_insertion_point(field_mutable:common.Event.aggregate_id)
  return aggregate_id_;
}
 ::common::Uuid* Event::release_aggregate_id() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_aggregate_id();
  } else {
    ::common::Uuid* temp = aggregate_id_;
    aggregate_id_ = NULL;
    return temp;
  }
}
 void Event::set_allocated_aggregate_id(::common::Uuid* aggregate_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete aggregate_id_;
  }
  if (aggregate_id != NULL) {
    _slow_set_allocated_aggregate_id(message_arena, &aggregate_id);
  }
  aggregate_id_ = aggregate_id;
  if (aggregate_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:common.Event.aggregate_id)
}

// optional string serialized_data = 2;
void Event::clear_serialized_data() {
  serialized_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& Event::serialized_data() const {
  // @@protoc_insertion_point(field_get:common.Event.serialized_data)
  return serialized_data_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Event::set_serialized_data(const ::std::string& value) {
  
  serialized_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:common.Event.serialized_data)
}
 void Event::set_serialized_data(const char* value) {
  
  serialized_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:common.Event.serialized_data)
}
 void Event::set_serialized_data(const char* value,
    size_t size) {
  
  serialized_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:common.Event.serialized_data)
}
 ::std::string* Event::mutable_serialized_data() {
  
  // @@protoc_insertion_point(field_mutable:common.Event.serialized_data)
  return serialized_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Event::release_serialized_data() {
  
  return serialized_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* Event::unsafe_arena_release_serialized_data() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return serialized_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void Event::set_allocated_serialized_data(::std::string* serialized_data) {
  if (serialized_data != NULL) {
    
  } else {
    
  }
  serialized_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:common.Event.serialized_data)
}
 void Event::unsafe_arena_set_allocated_serialized_data(
    ::std::string* serialized_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (serialized_data != NULL) {
    
  } else {
    
  }
  serialized_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      serialized_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:common.Event.serialized_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)
